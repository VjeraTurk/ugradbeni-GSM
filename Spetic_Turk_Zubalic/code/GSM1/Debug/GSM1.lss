
GSM1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00000e54  00000ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ae  008001a2  008001a2  0000102a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  0000105a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d45  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e1  00000000  00000000  00003f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab5  00000000  00000000  000044f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000049c  00000000  00000000  00004fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004df  00000000  00000000  0000544c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001729  00000000  00000000  0000592b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
   8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
   c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_13>
  38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_15>
  40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	61 6c       	ori	r22, 0xC1	; 193
  56:	6c 6f       	ori	r22, 0xFC	; 252
  58:	77 20       	and	r7, r7
  5a:	73 6c       	ori	r23, 0xC3	; 195
  5c:	65 65       	ori	r22, 0x55	; 85
  5e:	70 20       	and	r7, r0
  60:	6d 6f       	ori	r22, 0xFD	; 253
  62:	64 65       	ori	r22, 0x54	; 84
	...

00000065 <__c.2223>:
  65:	6e 61 20 6b 72 69 76 75 20 70 6f 72 75 6b 75 2e     na krivu poruku.
	...

00000076 <__c.2221>:
  76:	50 6f 73 6c 61 6e 20 6f 64 67 6f 76 6f 72 00        Poslan odgovor.

00000085 <__c.2219>:
  85:	6e 61 20 70 6f 72 75 6b 75 2e 00                    na poruku..

00000090 <__c.2217>:
  90:	50 6f 73 6c 61 6e 20 6f 64 67 6f 76 6f 72 00        Poslan odgovor.

0000009f <__c.2215>:
  9f:	53 61 6c 6a 65 6d 20 70 6f 72 75 6b 75 00           Saljem poruku.

000000ad <__c.2150>:
  ad:	72 78 42 75 66 66 65 72 3a 00                       rxBuffer:.

000000b7 <__c.2148>:
  b7:	6d 6f 64 65 00                                      mode.

000000bc <__c.2146>:
  bc:	55 6c 61 7a 69 6d 20 75 20 74 65 78 74 00           Ulazim u text.

000000ca <__c.2132>:
  ca:	62 72 6f 6a 3a 00                                   broj:.

000000d0 <__c.2130>:
  d0:	2b 43 4d 54 00                                      +CMT.

000000d5 <__c.2121>:
  d5:	67 6f 74 20 73 6d 73 00                             got sms.

000000dd <__c.2119>:
  dd:	53 65 6e 64 20 73 6d 73 20 74 6f 20 75 61 72 74     Send sms to uart
	...

000000ee <__c.2116>:
  ee:	44 65 6c 65 74 65 20 61 6c 6c 20 73 6d 73 00        Delete all sms.

000000fd <__c.2056>:
  fd:	50 72 65 6b 69 64 20 73 6c 65 65 70 20 6d 6f 64     Prekid sleep mod
 10d:	65 00 00                                            e..

00000110 <__ctors_end>:
 110:	11 24       	eor	r1, r1
 112:	1f be       	out	0x3f, r1	; 63
 114:	cf e5       	ldi	r28, 0x5F	; 95
 116:	d8 e0       	ldi	r29, 0x08	; 8
 118:	de bf       	out	0x3e, r29	; 62
 11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
 11c:	11 e0       	ldi	r17, 0x01	; 1
 11e:	a0 e6       	ldi	r26, 0x60	; 96
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e4 e5       	ldi	r30, 0x54	; 84
 124:	fe e0       	ldi	r31, 0x0E	; 14
 126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x10>
 128:	05 90       	lpm	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	a2 3a       	cpi	r26, 0xA2	; 162
 12e:	b1 07       	cpc	r27, r17
 130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0xc>

00000132 <__do_clear_bss>:
 132:	23 e0       	ldi	r18, 0x03	; 3
 134:	a2 ea       	ldi	r26, 0xA2	; 162
 136:	b1 e0       	ldi	r27, 0x01	; 1
 138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
 13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
 13c:	a0 35       	cpi	r26, 0x50	; 80
 13e:	b2 07       	cpc	r27, r18
 140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
 142:	0e 94 54 05 	call	0xaa8	; 0xaa8 <main>
 146:	0c 94 28 07 	jmp	0xe50	; 0xe50 <_exit>

0000014a <__bad_interrupt>:
 14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <__vector_13>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
		lcd_gotoxy(0,0);
		
		
		lcd_clrscr();
		_delay_ms(3000);
		see_rxBuffer();
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
		refresh_rxBuffer();
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
		//reboot();
		//while(!enable_text_mode());
		
		return 0; //CMS ERROR has occurred- return 0 so code can repeat request for the same index message
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
		
	}else if(strstr(rxBuffer,"+CME ERROR:"))
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
 170:	80 91 60 00 	lds	r24, 0x0060
 174:	81 11       	cpse	r24, r1
 176:	0a c0       	rjmp	.+20     	; 0x18c <__vector_13+0x3e>
 178:	60 e0       	ldi	r22, 0x00	; 0
	{
		lcd_clrscr();
 17a:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		lcd_gotoxy(0,0);
 17e:	8d ef       	ldi	r24, 0xFD	; 253
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
		lcd_puts_P("CME ERROR");
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 60 00 	sts	0x0060, r24
 18c:	e0 91 a5 01 	lds	r30, 0x01A5
 190:	8c b1       	in	r24, 0x0c	; 12
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ec 53       	subi	r30, 0x3C	; 60
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	80 83       	st	Z, r24
 19a:	e0 91 a5 01 	lds	r30, 0x01A5
 19e:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_ms(1000);
		lcd_gotoxy(0,0);
 1a0:	ec 53       	subi	r30, 0x3C	; 60
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	80 81       	ld	r24, Z
 1a6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <lcd_putc>
		

		lcd_clrscr();
 1aa:	e0 91 a5 01 	lds	r30, 0x01A5
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ec 53       	subi	r30, 0x3C	; 60
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	80 81       	ld	r24, Z
 1b6:	8b 34       	cpi	r24, 0x4B	; 75
 1b8:	79 f4       	brne	.+30     	; 0x1d8 <__vector_13+0x8a>
 1ba:	e0 91 a5 01 	lds	r30, 0x01A5
		//lcd_puts(rxBuffer);
		_delay_ms(3000);
		see_rxBuffer();
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ed 53       	subi	r30, 0x3D	; 61
		refresh_rxBuffer();
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	80 81       	ld	r24, Z
	
		
		return 0; //CME ERROR has occurred- return 0 so code can repeat request for the same index message
 1c6:	8f 34       	cpi	r24, 0x4F	; 79
 1c8:	39 f4       	brne	.+14     	; 0x1d8 <__vector_13+0x8a>
 1ca:	80 91 a9 01 	lds	r24, 0x01A9
		

	}else if (strstr(rxBuffer,"OK"))
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <__vector_13+0x8a>
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	80 93 a9 01 	sts	0x01A9, r24
 1d8:	80 91 a5 01 	lds	r24, 0x01A5
	{
		int read=0;

		if(strstr(rxBuffer,"UNREAD")){ // found UNREAD
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 a5 01 	sts	0x01A5, r24
 1e2:	80 91 a5 01 	lds	r24, 0x01A5
 1e6:	8f 3f       	cpi	r24, 0xFF	; 255
 1e8:	11 f4       	brne	.+4      	; 0x1ee <__vector_13+0xa0>
 1ea:	10 92 a5 01 	sts	0x01A5, r1
			read=1; // UNREAD message found, number starts at position 24
			sms_flag=1;
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
			get_from_number(read);
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
			return 1;
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
		}
		
		else if(strstr(rxBuffer,"READ")){ //found READ 
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_15>:
 210:	1f 92       	push	r1
			read=2;//READ message found number starts at position 22
			sms_flag=1;
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
			get_from_number(read);
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
 222:	90 91 a8 01 	lds	r25, 0x01A8
			return 1;
 226:	80 91 a7 01 	lds	r24, 0x01A7
 22a:	98 17       	cp	r25, r24
			

		// if GSM gets out of text mode it will reply to sms request with string of numbers (PDU mode) and OK at the end,
		// code will end up here, where text mode will be reentered:
			
			while(!enable_text_mode());
 22c:	91 f0       	breq	.+36     	; 0x252 <__vector_15+0x42>
 22e:	e0 91 a8 01 	lds	r30, 0x01A8
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	ed 53       	subi	r30, 0x3D	; 61
			return 0; 
		}
		
	}
	
	return 0;
 236:	fd 4f       	sbci	r31, 0xFD	; 253
 238:	80 81       	ld	r24, Z
 23a:	8c b9       	out	0x0c, r24	; 12

		// if GSM gets out of text mode it will reply to sms request with string of numbers (PDU mode) and OK at the end,
		// code will end up here, where text mode will be reentered:
			
			while(!enable_text_mode());
			return 0; 
 23c:	80 91 a8 01 	lds	r24, 0x01A8
		}
		
	}
	
	return 0;
}
 240:	8f 5f       	subi	r24, 0xFF	; 255
{
	if(txReadPos != txWritePos)
	{
		UDR = txBuffer[txReadPos];
		//lcd_putc(txBuffer[txReadPos]);
		txReadPos++;
 242:	80 93 a8 01 	sts	0x01A8, r24

		if (txReadPos>=TX_BUFFER_SIZE)
 246:	80 91 a8 01 	lds	r24, 0x01A8
 24a:	88 23       	and	r24, r24
 24c:	14 f4       	brge	.+4      	; 0x252 <__vector_15+0x42>
		{
			txReadPos=0;
 24e:	10 92 a8 01 	sts	0x01A8, r1
		}
	}
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <USART_putc>:

void USART_putc (char data)
{
	// Wait for empty transmit buffer
	while ( !( UCSRA & _BV(UDRE)) );
 264:	5d 9b       	sbis	0x0b, 5	; 11
 266:	fe cf       	rjmp	.-4      	; 0x264 <USART_putc>

	// Put data into buffer, i.e., send the data
	//lcd_putc(data);
	UDR = data;
 268:	8c b9       	out	0x0c, r24	; 12
 26a:	08 95       	ret

0000026c <USART_puts>:
}
void USART_puts(char str[])
{
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	8c 01       	movw	r16, r24
 27a:	7c 01       	movw	r14, r24
	int i;

	for(i=0; i<strlen(str); i++)
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	d0 e0       	ldi	r29, 0x00	; 0
 280:	0f c0       	rjmp	.+30     	; 0x2a0 <USART_puts+0x34>
	{
		USART_putc(str[i]);
 282:	f7 01       	movw	r30, r14
 284:	81 91       	ld	r24, Z+
 286:	7f 01       	movw	r14, r30
 288:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 28c:	ff ef       	ldi	r31, 0xFF	; 255
 28e:	24 e3       	ldi	r18, 0x34	; 52
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	f1 50       	subi	r31, 0x01	; 1
 294:	20 40       	sbci	r18, 0x00	; 0
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <USART_puts+0x26>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <USART_puts+0x30>
 29c:	00 00       	nop
}
void USART_puts(char str[])
{
	int i;

	for(i=0; i<strlen(str); i++)
 29e:	21 96       	adiw	r28, 0x01	; 1
 2a0:	f8 01       	movw	r30, r16
 2a2:	01 90       	ld	r0, Z+
 2a4:	00 20       	and	r0, r0
 2a6:	e9 f7       	brne	.-6      	; 0x2a2 <USART_puts+0x36>
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	e0 1b       	sub	r30, r16
 2ac:	f1 0b       	sbc	r31, r17
 2ae:	ce 17       	cp	r28, r30
 2b0:	df 07       	cpc	r29, r31
 2b2:	38 f3       	brcs	.-50     	; 0x282 <USART_puts+0x16>
	{
		USART_putc(str[i]);
		_delay_ms(500);
	}
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	08 95       	ret

000002c2 <init>:
	}
}
///////////////////////////////////////////////////
void init(){
	//initialize IO
	lcd_init(LCD_DISP_ON);
 2c2:	8c e0       	ldi	r24, 0x0C	; 12
 2c4:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_init>
	lcd_clrscr();
 2c8:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
	//backlight pins
	DDRD |=_BV(RED) | _BV(GREEN) | _BV(BLUE); //RGB PB2 PB1 PB0
 2cc:	81 b3       	in	r24, 0x11	; 17
 2ce:	8c 61       	ori	r24, 0x1C	; 28
 2d0:	81 bb       	out	0x11, r24	; 17
	PORTD|=_BV(RED) | _BV(GREEN) | _BV(BLUE);
 2d2:	82 b3       	in	r24, 0x12	; 18
 2d4:	8c 61       	ori	r24, 0x1C	; 28
 2d6:	82 bb       	out	0x12, r24	; 18
	
	
	//initialize UART
	//set baud rate
	UBRRH = 0;
 2d8:	10 bc       	out	0x20, r1	; 32
	UBRRL = BRC;
 2da:	83 e3       	ldi	r24, 0x33	; 51
 2dc:	89 b9       	out	0x09, r24	; 9
	//enable receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN)| (1<<RXCIE)| (1<<TXCIE);
 2de:	88 ed       	ldi	r24, 0xD8	; 216
 2e0:	8a b9       	out	0x0a, r24	; 10
	//set frame format: 8 bit, character size 8 bit
	UCSRC = (1 << UCSZ0) | (1 << UCSZ1)|(1 << URSEL);
 2e2:	86 e8       	ldi	r24, 0x86	; 134
 2e4:	80 bd       	out	0x20, r24	; 32
	
	//initialize ADC
	//adc enable, prescaler=64 -> clk=115200
	ADCSRA = _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1);
 2e6:	86 b9       	out	0x06, r24	; 6
	//AVcc reference voltage
	ADMUX = _BV(REFS0);
 2e8:	80 e4       	ldi	r24, 0x40	; 64
 2ea:	87 b9       	out	0x07, r24	; 7

	//PA2 RED LED
	DDRA |= _BV(LED); //LED
 2ec:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA |= _BV(SLEEP); //LED
 2ee:	d3 9a       	sbi	0x1a, 3	; 26
	
	PORTA&=~_BV(SLEEP);
 2f0:	db 98       	cbi	0x1b, 3	; 27
 2f2:	08 95       	ret

000002f4 <getLight>:
}

volatile uint8_t getLight(uint8_t channel)
{
	//choose channel
	ADMUX &= ~(0x7);
 2f4:	97 b1       	in	r25, 0x07	; 7
 2f6:	98 7f       	andi	r25, 0xF8	; 248
 2f8:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
 2fa:	97 b1       	in	r25, 0x07	; 7
 2fc:	89 2b       	or	r24, r25
 2fe:	87 b9       	out	0x07, r24	; 7
	ADMUX |= 1<<ADLAR;
 300:	3d 9a       	sbi	0x07, 5	; 7

	//start conversion
	ADCSRA |= _BV(ADSC);
 302:	36 9a       	sbi	0x06, 6	; 6

	//wait until conversion completes
	while (ADCSRA & _BV(ADSC) );
 304:	36 99       	sbic	0x06, 6	; 6
 306:	fe cf       	rjmp	.-4      	; 0x304 <getLight+0x10>
	return ADCH;
 308:	85 b1       	in	r24, 0x05	; 5
}
 30a:	08 95       	ret

0000030c <see_rxBuffer>:

///////////////////////////////////////////

void see_rxBuffer(){

	lcd_clrscr();
 30c:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
	rxReadPos=0;
 310:	10 92 a6 01 	sts	0x01A6, r1
	
	while(rxReadPos!=rxWritePos){
 314:	90 91 a6 01 	lds	r25, 0x01A6
 318:	80 91 a5 01 	lds	r24, 0x01A5
 31c:	98 17       	cp	r25, r24
 31e:	09 f4       	brne	.+2      	; 0x322 <see_rxBuffer+0x16>
 320:	3f c0       	rjmp	.+126    	; 0x3a0 <see_rxBuffer+0x94>
		//if(rxReadPos%16==0 || rxReadPos==0) lcd_gotoxy(0,0);
		if (rxReadPos==0) lcd_gotoxy(0,0);
 322:	80 91 a6 01 	lds	r24, 0x01A6
 326:	81 11       	cpse	r24, r1
 328:	04 c0       	rjmp	.+8      	; 0x332 <see_rxBuffer+0x26>
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
 330:	1b c0       	rjmp	.+54     	; 0x368 <see_rxBuffer+0x5c>
		else if (rxReadPos==16 || rxReadPos==48) lcd_gotoxy(0,1);
 332:	80 91 a6 01 	lds	r24, 0x01A6
 336:	80 31       	cpi	r24, 0x10	; 16
 338:	21 f0       	breq	.+8      	; 0x342 <see_rxBuffer+0x36>
 33a:	80 91 a6 01 	lds	r24, 0x01A6
 33e:	80 33       	cpi	r24, 0x30	; 48
 340:	29 f4       	brne	.+10     	; 0x34c <see_rxBuffer+0x40>
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
 34a:	0e c0       	rjmp	.+28     	; 0x368 <see_rxBuffer+0x5c>
		else if (rxReadPos==32 || rxReadPos==64) {
 34c:	80 91 a6 01 	lds	r24, 0x01A6
 350:	80 32       	cpi	r24, 0x20	; 32
 352:	21 f0       	breq	.+8      	; 0x35c <see_rxBuffer+0x50>
 354:	80 91 a6 01 	lds	r24, 0x01A6
 358:	80 34       	cpi	r24, 0x40	; 64
 35a:	31 f4       	brne	.+12     	; 0x368 <see_rxBuffer+0x5c>
			lcd_clrscr();
 35c:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
			lcd_gotoxy(0,0);
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		}
		lcd_putc(rxBuffer[rxReadPos]);
 368:	e0 91 a6 01 	lds	r30, 0x01A6
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	ec 53       	subi	r30, 0x3C	; 60
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	80 81       	ld	r24, Z
 374:	0e 94 61 06 	call	0xcc2	; 0xcc2 <lcd_putc>
		rxReadPos++;
 378:	80 91 a6 01 	lds	r24, 0x01A6
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 a6 01 	sts	0x01A6, r24
 382:	2f eb       	ldi	r18, 0xBF	; 191
 384:	85 e4       	ldi	r24, 0x45	; 69
 386:	94 e0       	ldi	r25, 0x04	; 4
 388:	21 50       	subi	r18, 0x01	; 1
 38a:	80 40       	sbci	r24, 0x00	; 0
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <see_rxBuffer+0x7c>
 390:	00 c0       	rjmp	.+0      	; 0x392 <see_rxBuffer+0x86>
 392:	00 00       	nop
void see_rxBuffer(){

	lcd_clrscr();
	rxReadPos=0;
	
	while(rxReadPos!=rxWritePos){
 394:	90 91 a6 01 	lds	r25, 0x01A6
 398:	80 91 a5 01 	lds	r24, 0x01A5
 39c:	98 13       	cpse	r25, r24
 39e:	c1 cf       	rjmp	.-126    	; 0x322 <see_rxBuffer+0x16>
 3a0:	08 95       	ret

000003a2 <refresh_rxBuffer>:
		_delay_ms(175);
	}
}

void refresh_rxBuffer(){
	*rxBuffer='\0';
 3a2:	10 92 c4 01 	sts	0x01C4, r1
	rxReadPos=0;
 3a6:	10 92 a6 01 	sts	0x01A6, r1
	rxWritePos=0;
 3aa:	10 92 a5 01 	sts	0x01A5, r1
 3ae:	08 95       	ret

000003b0 <RED_light>:
}

void RED_light(){
	PORTD |=_BV(RED); //RED ON
 3b0:	94 9a       	sbi	0x12, 4	; 18
	
	PORTD &=~_BV(BLUE); //BLUE OFF
 3b2:	92 98       	cbi	0x12, 2	; 18
	PORTD &=~_BV(GREEN);	//GREEN OFF
 3b4:	93 98       	cbi	0x12, 3	; 18
 3b6:	08 95       	ret

000003b8 <BLUE_light>:
}
void BLUE_light(){
	PORTD |=_BV(BLUE); //BLUE ON
 3b8:	92 9a       	sbi	0x12, 2	; 18
	
	PORTD &=~_BV(RED);
 3ba:	94 98       	cbi	0x12, 4	; 18
	PORTD &=~_BV(GREEN);
 3bc:	93 98       	cbi	0x12, 3	; 18
 3be:	08 95       	ret

000003c0 <enable_text_mode>:
	DDRA |= _BV(SLEEP); //LED
	
	PORTA&=~_BV(SLEEP);
}

int enable_text_mode(void){
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
 3c8:	2a 97       	sbiw	r28, 0x0a	; 10
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61

	char text_mode[] = "AT+CMGF=1";
 3d4:	8a e0       	ldi	r24, 0x0A	; 10
 3d6:	ee e6       	ldi	r30, 0x6E	; 110
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	de 01       	movw	r26, r28
 3dc:	11 96       	adiw	r26, 0x01	; 1
 3de:	01 90       	ld	r0, Z+
 3e0:	0d 92       	st	X+, r0
 3e2:	8a 95       	dec	r24
 3e4:	e1 f7       	brne	.-8      	; 0x3de <enable_text_mode+0x1e>
	
	RED_light();
 3e6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <RED_light>
	
	refresh_rxBuffer();
 3ea:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <refresh_rxBuffer>
	lcd_clrscr();
 3ee:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
	lcd_gotoxy(0,0);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
	lcd_puts_P("Ulazim u text");
 3fa:	8c eb       	ldi	r24, 0xBC	; 188
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
	lcd_gotoxy(0,1);
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
	lcd_puts_P("mode");
 40a:	87 eb       	ldi	r24, 0xB7	; 183
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
	USART_puts(text_mode);
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
	tm_flag=1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 a9 01 	sts	0x01A9, r24
	USART_putc(13); //ENTER
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	83 ed       	ldi	r24, 0xD3	; 211
 42a:	90 e3       	ldi	r25, 0x30	; 48
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <enable_text_mode+0x6c>
 434:	00 c0       	rjmp	.+0      	; 0x436 <enable_text_mode+0x76>
 436:	00 00       	nop
	
	_delay_ms(2000);
	lcd_gotoxy(4, 1);
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
	lcd_putc('.');
 440:	8e e2       	ldi	r24, 0x2E	; 46
 442:	0e 94 61 06 	call	0xcc2	; 0xcc2 <lcd_putc>
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	89 e6       	ldi	r24, 0x69	; 105
 44a:	98 e1       	ldi	r25, 0x18	; 24
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <enable_text_mode+0x8c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <enable_text_mode+0x96>
 456:	00 00       	nop
	_delay_ms(1000);
	lcd_gotoxy(5, 1);
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
	lcd_putc('.');
 460:	8e e2       	ldi	r24, 0x2E	; 46
 462:	0e 94 61 06 	call	0xcc2	; 0xcc2 <lcd_putc>
 466:	2f ef       	ldi	r18, 0xFF	; 255
 468:	89 e6       	ldi	r24, 0x69	; 105
 46a:	98 e1       	ldi	r25, 0x18	; 24
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <enable_text_mode+0xac>
 474:	00 c0       	rjmp	.+0      	; 0x476 <enable_text_mode+0xb6>
 476:	00 00       	nop
	_delay_ms(1000);
	lcd_gotoxy(6, 1);
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	86 e0       	ldi	r24, 0x06	; 6
 47c:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
	lcd_putc('.');
 480:	8e e2       	ldi	r24, 0x2E	; 46
 482:	0e 94 61 06 	call	0xcc2	; 0xcc2 <lcd_putc>
 486:	2f ef       	ldi	r18, 0xFF	; 255
 488:	89 e6       	ldi	r24, 0x69	; 105
 48a:	98 e1       	ldi	r25, 0x18	; 24
 48c:	21 50       	subi	r18, 0x01	; 1
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <enable_text_mode+0xcc>
 494:	00 c0       	rjmp	.+0      	; 0x496 <enable_text_mode+0xd6>
 496:	00 00       	nop
	_delay_ms(1000);
	
	if (tm_flag==2){
 498:	80 91 a9 01 	lds	r24, 0x01A9
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	49 f4       	brne	.+18     	; 0x4b2 <enable_text_mode+0xf2>
		tm_flag=0; 
 4a0:	10 92 a9 01 	sts	0x01A9, r1
		lcd_clrscr();
 4a4:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
		
		BLUE_light();
 4a8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <BLUE_light>
		return 1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	1c c0       	rjmp	.+56     	; 0x4ea <enable_text_mode+0x12a>
		
		} else {
		lcd_clrscr();
 4b2:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
 4b6:	2f ef       	ldi	r18, 0xFF	; 255
 4b8:	84 e3       	ldi	r24, 0x34	; 52
 4ba:	9c e0       	ldi	r25, 0x0C	; 12
 4bc:	21 50       	subi	r18, 0x01	; 1
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	90 40       	sbci	r25, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <enable_text_mode+0xfc>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <enable_text_mode+0x106>
 4c6:	00 00       	nop
		_delay_ms(500);
		lcd_puts_P("rxBuffer:");
 4c8:	8d ea       	ldi	r24, 0xAD	; 173
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
 4d0:	2f ef       	ldi	r18, 0xFF	; 255
 4d2:	84 e3       	ldi	r24, 0x34	; 52
 4d4:	9c e0       	ldi	r25, 0x0C	; 12
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	80 40       	sbci	r24, 0x00	; 0
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <enable_text_mode+0x116>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <enable_text_mode+0x120>
 4e0:	00 00       	nop
		_delay_ms(500);
		see_rxBuffer();
 4e2:	0e 94 86 01 	call	0x30c	; 0x30c <see_rxBuffer>
		return 0;
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 4ea:	2a 96       	adiw	r28, 0x0a	; 10
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <GREEN_light>:
	
	PORTD &=~_BV(RED);
	PORTD &=~_BV(GREEN);
}
void GREEN_light(){
	PORTD |=_BV(GREEN); //RED ON
 4fc:	93 9a       	sbi	0x12, 3	; 18
	
	PORTD &=~_BV(RED);
 4fe:	94 98       	cbi	0x12, 4	; 18
	PORTD &=~_BV(BLUE);
 500:	92 98       	cbi	0x12, 2	; 18
 502:	08 95       	ret

00000504 <rainbow>:
	//yello: green+ pwm red TOP/1.5
	//orange: green + pwm red TOP/1.2 ili 1.1

	
	
	cli();
 504:	f8 94       	cli
	
	TCCR1A |= _BV(COM1B1)|_BV(WGM11)|_BV(WGM10);
 506:	8f b5       	in	r24, 0x2f	; 47
 508:	83 62       	ori	r24, 0x23	; 35
 50a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= _BV(WGM13)|_BV(WGM12);
 50c:	8e b5       	in	r24, 0x2e	; 46
 50e:	88 61       	ori	r24, 0x18	; 24
 510:	8e bd       	out	0x2e, r24	; 46
	OCR1A   = TOP;				// set TOP value
 512:	87 ee       	ldi	r24, 0xE7	; 231
 514:	93 e0       	ldi	r25, 0x03	; 3
 516:	9b bd       	out	0x2b, r25	; 43
 518:	8a bd       	out	0x2a, r24	; 42
	OCR1B   = RED_DEF;		// set default contrast value
 51a:	8d e4       	ldi	r24, 0x4D	; 77
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	99 bd       	out	0x29, r25	; 41
 520:	88 bd       	out	0x28, r24	; 40
	
	TIMSK  |= _BV(OCIE1A);
 522:	89 b7       	in	r24, 0x39	; 57
 524:	80 61       	ori	r24, 0x10	; 16
 526:	89 bf       	out	0x39, r24	; 57

	TCCR1B |= _BV(CS11) | _BV(CS10);
 528:	8e b5       	in	r24, 0x2e	; 46
 52a:	83 60       	ori	r24, 0x03	; 3
 52c:	8e bd       	out	0x2e, r24	; 46
	
	RED_light();		//RED
 52e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <RED_light>
 532:	2f ef       	ldi	r18, 0xFF	; 255
 534:	89 e6       	ldi	r24, 0x69	; 105
 536:	98 e1       	ldi	r25, 0x18	; 24
 538:	21 50       	subi	r18, 0x01	; 1
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	90 40       	sbci	r25, 0x00	; 0
 53e:	e1 f7       	brne	.-8      	; 0x538 <rainbow+0x34>
 540:	00 c0       	rjmp	.+0      	; 0x542 <rainbow+0x3e>
 542:	00 00       	nop
	_delay_ms(1000);
	
	GREEN_light();
 544:	0e 94 7e 02 	call	0x4fc	; 0x4fc <GREEN_light>
	OCR1B   = TOP/1.1; 	// ORANGE
 548:	8c e8       	ldi	r24, 0x8C	; 140
 54a:	93 e0       	ldi	r25, 0x03	; 3
 54c:	99 bd       	out	0x29, r25	; 41
 54e:	88 bd       	out	0x28, r24	; 40
 550:	2f ef       	ldi	r18, 0xFF	; 255
 552:	89 e6       	ldi	r24, 0x69	; 105
 554:	98 e1       	ldi	r25, 0x18	; 24
 556:	21 50       	subi	r18, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <rainbow+0x52>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <rainbow+0x5c>
 560:	00 00       	nop
	_delay_ms(1000);
	
	OCR1B   = TOP/1.5; // YELLOW
 562:	8a e9       	ldi	r24, 0x9A	; 154
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	99 bd       	out	0x29, r25	; 41
 568:	88 bd       	out	0x28, r24	; 40
 56a:	2f ef       	ldi	r18, 0xFF	; 255
 56c:	89 e6       	ldi	r24, 0x69	; 105
 56e:	98 e1       	ldi	r25, 0x18	; 24
 570:	21 50       	subi	r18, 0x01	; 1
 572:	80 40       	sbci	r24, 0x00	; 0
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <rainbow+0x6c>
 578:	00 c0       	rjmp	.+0      	; 0x57a <rainbow+0x76>
 57a:	00 00       	nop
	_delay_ms(1000);
	
	OCR1B   = TOP/3; //GREEN
 57c:	8d e4       	ldi	r24, 0x4D	; 77
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	99 bd       	out	0x29, r25	; 41
 582:	88 bd       	out	0x28, r24	; 40
	GREEN_light();
 584:	0e 94 7e 02 	call	0x4fc	; 0x4fc <GREEN_light>
 588:	2f ef       	ldi	r18, 0xFF	; 255
 58a:	89 e6       	ldi	r24, 0x69	; 105
 58c:	98 e1       	ldi	r25, 0x18	; 24
 58e:	21 50       	subi	r18, 0x01	; 1
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <rainbow+0x8a>
 596:	00 c0       	rjmp	.+0      	; 0x598 <rainbow+0x94>
 598:	00 00       	nop
	
	_delay_ms(1000);
	
	BLUE_light();
 59a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <BLUE_light>
	OCR1B   = TOP/10; //INDIGO
 59e:	83 e6       	ldi	r24, 0x63	; 99
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	99 bd       	out	0x29, r25	; 41
 5a4:	88 bd       	out	0x28, r24	; 40
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	89 e6       	ldi	r24, 0x69	; 105
 5aa:	98 e1       	ldi	r25, 0x18	; 24
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <rainbow+0xa8>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <rainbow+0xb2>
 5b6:	00 00       	nop
	_delay_ms(1000);
	
	OCR1B   = TOP/3; //VIOLET
 5b8:	8d e4       	ldi	r24, 0x4D	; 77
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	99 bd       	out	0x29, r25	; 41
 5be:	88 bd       	out	0x28, r24	; 40
 5c0:	2f ef       	ldi	r18, 0xFF	; 255
 5c2:	89 e6       	ldi	r24, 0x69	; 105
 5c4:	98 e1       	ldi	r25, 0x18	; 24
 5c6:	21 50       	subi	r18, 0x01	; 1
 5c8:	80 40       	sbci	r24, 0x00	; 0
 5ca:	90 40       	sbci	r25, 0x00	; 0
 5cc:	e1 f7       	brne	.-8      	; 0x5c6 <rainbow+0xc2>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <rainbow+0xcc>
 5d0:	00 00       	nop
	_delay_ms(1000);
	
	TCCR1A = 0;
 5d2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 5d4:	1e bc       	out	0x2e, r1	; 46
	OCR1A  = 0;
 5d6:	1b bc       	out	0x2b, r1	; 43
 5d8:	1a bc       	out	0x2a, r1	; 42
	
	TCCR1B &= ~_BV(CS11);
 5da:	8e b5       	in	r24, 0x2e	; 46
 5dc:	8d 7f       	andi	r24, 0xFD	; 253
 5de:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~_BV(CS10);
 5e0:	8e b5       	in	r24, 0x2e	; 46
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK  &=~_BV(OCIE1A);
 5e6:	89 b7       	in	r24, 0x39	; 57
 5e8:	8f 7e       	andi	r24, 0xEF	; 239
 5ea:	89 bf       	out	0x39, r24	; 57

	DDRD |=_BV(RED) | _BV(GREEN) | _BV(BLUE); //RGB PB2 PB1 PB0
 5ec:	81 b3       	in	r24, 0x11	; 17
 5ee:	8c 61       	ori	r24, 0x1C	; 28
 5f0:	81 bb       	out	0x11, r24	; 17
	PORTD|=_BV(RED) | _BV(GREEN) | _BV(BLUE);
 5f2:	82 b3       	in	r24, 0x12	; 18
 5f4:	8c 61       	ori	r24, 0x1C	; 28
 5f6:	82 bb       	out	0x12, r24	; 18
	//PORTD|=_BV(GREEN) | _BV(BLUE);
	
	sei();
 5f8:	78 94       	sei
 5fa:	08 95       	ret

000005fc <LUX>:
	}
	return 1;
	
}

void LUX(){
 5fc:	ff 92       	push	r15
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	63 97       	sbiw	r28, 0x13	; 19
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	f8 94       	cli
 610:	de bf       	out	0x3e, r29	; 62
 612:	0f be       	out	0x3f, r0	; 63
 614:	cd bf       	out	0x3d, r28	; 61

	char sms[]="AT+CMGS="; //sms command
 616:	89 e0       	ldi	r24, 0x09	; 9
 618:	ea e3       	ldi	r30, 0x3A	; 58
 61a:	f1 e0       	ldi	r31, 0x01	; 1
 61c:	de 01       	movw	r26, r28
 61e:	11 96       	adiw	r26, 0x01	; 1
 620:	01 90       	ld	r0, Z+
 622:	0d 92       	st	X+, r0
 624:	8a 95       	dec	r24
 626:	e1 f7       	brne	.-8      	; 0x620 <LUX+0x24>
	char *dannoc="d/n";
	uint8_t adch=0;
	uint8_t i;
	static uint8_t after_lux=0;
	
	if(strstr(rxBuffer, "LUX?")){
 628:	66 e0       	ldi	r22, 0x06	; 6
 62a:	71 e0       	ldi	r23, 0x01	; 1
 62c:	84 ec       	ldi	r24, 0xC4	; 196
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strstr>
 634:	89 2b       	or	r24, r25
 636:	09 f4       	brne	.+2      	; 0x63a <LUX+0x3e>
 638:	c0 c0       	rjmp	.+384    	; 0x7ba <LUX+0x1be>
		
		lcd_gotoxy(0,1);
 63a:	61 e0       	ldi	r22, 0x01	; 1
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		adch=getLight(1);
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <getLight>
 648:	f8 2e       	mov	r15, r24
		
		if (adch>200){
 64a:	28 ec       	ldi	r18, 0xC8	; 200
 64c:	28 17       	cp	r18, r24
 64e:	c8 f4       	brcc	.+50     	; 0x682 <LUX+0x86>
			dannoc=" dan";
			
			if (upaljeno) {
 650:	80 91 a4 01 	lds	r24, 0x01A4
 654:	88 23       	and	r24, r24
 656:	71 f1       	breq	.+92     	; 0x6b4 <LUX+0xb8>
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	30 e0       	ldi	r19, 0x00	; 0
				dannoc = " dan. Ugasiti svjetlo(DA)? ";
				
				for (i=0; i<13; i++) {
					from_number_lux[i] = from_number[i];
 65c:	f9 01       	movw	r30, r18
 65e:	e9 54       	subi	r30, 0x49	; 73
 660:	fe 4f       	sbci	r31, 0xFE	; 254
 662:	80 81       	ld	r24, Z
 664:	f9 01       	movw	r30, r18
 666:	ed 5b       	subi	r30, 0xBD	; 189
 668:	fc 4f       	sbci	r31, 0xFC	; 252
 66a:	80 83       	st	Z, r24
 66c:	2f 5f       	subi	r18, 0xFF	; 255
 66e:	3f 4f       	sbci	r19, 0xFF	; 255
			dannoc=" dan";
			
			if (upaljeno) {
				dannoc = " dan. Ugasiti svjetlo(DA)? ";
				
				for (i=0; i<13; i++) {
 670:	2d 30       	cpi	r18, 0x0D	; 13
 672:	31 05       	cpc	r19, r1
 674:	99 f7       	brne	.-26     	; 0x65c <LUX+0x60>
					from_number_lux[i] = from_number[i];
				}
				after_lux = 1; //indicates the light is supposed to be turned off if next sms from this number is "DA"
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	80 93 a2 01 	sts	0x01A2, r24
		
		if (adch>200){
			dannoc=" dan";
			
			if (upaljeno) {
				dannoc = " dan. Ugasiti svjetlo(DA)? ";
 67c:	05 ec       	ldi	r16, 0xC5	; 197
 67e:	10 e0       	ldi	r17, 0x00	; 0
 680:	1e c0       	rjmp	.+60     	; 0x6be <LUX+0xc2>
			}
			
			}else{
			dannoc=" noc";
			
			if (!upaljeno) {
 682:	80 91 a4 01 	lds	r24, 0x01A4
 686:	81 11       	cpse	r24, r1
 688:	18 c0       	rjmp	.+48     	; 0x6ba <LUX+0xbe>
 68a:	20 e0       	ldi	r18, 0x00	; 0
 68c:	30 e0       	ldi	r19, 0x00	; 0
				dannoc=" noc. Upaliti svjetlo(DA)?";
				for (i=0; i<13; i++) {
					from_number_lux[i] = from_number[i];
 68e:	f9 01       	movw	r30, r18
 690:	e9 54       	subi	r30, 0x49	; 73
 692:	fe 4f       	sbci	r31, 0xFE	; 254
 694:	90 81       	ld	r25, Z
 696:	f9 01       	movw	r30, r18
 698:	ed 5b       	subi	r30, 0xBD	; 189
 69a:	fc 4f       	sbci	r31, 0xFC	; 252
 69c:	90 83       	st	Z, r25
 69e:	2f 5f       	subi	r18, 0xFF	; 255
 6a0:	3f 4f       	sbci	r19, 0xFF	; 255
			}else{
			dannoc=" noc";
			
			if (!upaljeno) {
				dannoc=" noc. Upaliti svjetlo(DA)?";
				for (i=0; i<13; i++) {
 6a2:	2d 30       	cpi	r18, 0x0D	; 13
 6a4:	31 05       	cpc	r19, r1
 6a6:	99 f7       	brne	.-26     	; 0x68e <LUX+0x92>
					from_number_lux[i] = from_number[i];
				}
				after_lux = 1; //indicates the light is supposed to be turned on if next sms from this number is "DA"
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 93 a2 01 	sts	0x01A2, r24
			
			}else{
			dannoc=" noc";
			
			if (!upaljeno) {
				dannoc=" noc. Upaliti svjetlo(DA)?";
 6ae:	06 ee       	ldi	r16, 0xE6	; 230
 6b0:	10 e0       	ldi	r17, 0x00	; 0
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <LUX+0xc2>
		
		lcd_gotoxy(0,1);
		adch=getLight(1);
		
		if (adch>200){
			dannoc=" dan";
 6b4:	01 e0       	ldi	r16, 0x01	; 1
 6b6:	11 e0       	ldi	r17, 0x01	; 1
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <LUX+0xc2>
				}
				after_lux = 1; //indicates the light is supposed to be turned off if next sms from this number is "DA"
			}
			
			}else{
			dannoc=" noc";
 6ba:	01 ee       	ldi	r16, 0xE1	; 225
 6bc:	10 e0       	ldi	r17, 0x00	; 0
				}
				after_lux = 1; //indicates the light is supposed to be turned on if next sms from this number is "DA"
			}
		}
		
		refresh_rxBuffer();
 6be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <refresh_rxBuffer>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 6c2:	4a e0       	ldi	r20, 0x0A	; 10
 6c4:	be 01       	movw	r22, r28
 6c6:	66 5f       	subi	r22, 0xF6	; 246
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ca:	8f 2d       	mov	r24, r15
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 f3 06 	call	0xde6	; 0xde6 <__itoa_ncheck>
		/// tog i tog datuma, u toliko sati intenzitet je ___
		///char present[]=present=date_time_check();
		
		itoa(adch,rez,10);
		
		lcd_clrscr();
 6d2:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
		lcd_gotoxy(0,0);
 6d6:	60 e0       	ldi	r22, 0x00	; 0
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		lcd_puts_P("Saljem poruku");
 6de:	8f e9       	ldi	r24, 0x9F	; 159
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
		lcd_gotoxy(0,1);
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		lcd_puts(from_number);
 6ee:	87 eb       	ldi	r24, 0xB7	; 183
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	0e 94 76 06 	call	0xcec	; 0xcec <lcd_puts>
		USART_puts(sms);
 6f6:	ce 01       	movw	r24, r28
 6f8:	01 96       	adiw	r24, 0x01	; 1
 6fa:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
		USART_putc(34);
 6fe:	82 e2       	ldi	r24, 0x22	; 34
 700:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
		
		USART_puts(from_number);
 704:	87 eb       	ldi	r24, 0xB7	; 183
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
		USART_putc(34);
 70c:	82 e2       	ldi	r24, 0x22	; 34
 70e:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	99 e6       	ldi	r25, 0x69	; 105
 716:	28 e1       	ldi	r18, 0x18	; 24
 718:	81 50       	subi	r24, 0x01	; 1
 71a:	90 40       	sbci	r25, 0x00	; 0
 71c:	20 40       	sbci	r18, 0x00	; 0
 71e:	e1 f7       	brne	.-8      	; 0x718 <LUX+0x11c>
 720:	00 c0       	rjmp	.+0      	; 0x722 <LUX+0x126>
 722:	00 00       	nop
		_delay_ms(1000);
		USART_putc(13);
 724:	8d e0       	ldi	r24, 0x0D	; 13
 726:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	99 e6       	ldi	r25, 0x69	; 105
 72e:	28 e1       	ldi	r18, 0x18	; 24
 730:	81 50       	subi	r24, 0x01	; 1
 732:	90 40       	sbci	r25, 0x00	; 0
 734:	20 40       	sbci	r18, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <LUX+0x134>
 738:	00 c0       	rjmp	.+0      	; 0x73a <LUX+0x13e>
 73a:	00 00       	nop
		_delay_ms(1000);

		///USART_puts(present);
		
		USART_puts(sms_text);
 73c:	8b e0       	ldi	r24, 0x0B	; 11
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
		USART_puts(rez);
 744:	ce 01       	movw	r24, r28
 746:	0a 96       	adiw	r24, 0x0a	; 10
 748:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
		USART_puts(dannoc);
 74c:	c8 01       	movw	r24, r16
 74e:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
		USART_putc(26); // CTRL+z
 752:	8a e1       	ldi	r24, 0x1A	; 26
 754:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	9d e3       	ldi	r25, 0x3D	; 61
 75c:	29 e4       	ldi	r18, 0x49	; 73
 75e:	81 50       	subi	r24, 0x01	; 1
 760:	90 40       	sbci	r25, 0x00	; 0
 762:	20 40       	sbci	r18, 0x00	; 0
 764:	e1 f7       	brne	.-8      	; 0x75e <LUX+0x162>
 766:	00 c0       	rjmp	.+0      	; 0x768 <LUX+0x16c>
 768:	00 00       	nop
		
		_delay_ms(3000);
		
		
		GREEN_light();
 76a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <GREEN_light>
		
		lcd_clrscr();
 76e:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
		lcd_gotoxy(0,0);
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		lcd_puts_P("Poslan odgovor");
 77a:	80 e9       	ldi	r24, 0x90	; 144
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
		lcd_gotoxy(0,1);
 782:	61 e0       	ldi	r22, 0x01	; 1
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		lcd_puts_P("na poruku.");
 78a:	85 e8       	ldi	r24, 0x85	; 133
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
 792:	8f ef       	ldi	r24, 0xFF	; 255
 794:	93 ed       	ldi	r25, 0xD3	; 211
 796:	20 e3       	ldi	r18, 0x30	; 48
 798:	81 50       	subi	r24, 0x01	; 1
 79a:	90 40       	sbci	r25, 0x00	; 0
 79c:	20 40       	sbci	r18, 0x00	; 0
 79e:	e1 f7       	brne	.-8      	; 0x798 <LUX+0x19c>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <LUX+0x1a6>
 7a2:	00 00       	nop
		_delay_ms(2000);
		
		see_rxBuffer();
 7a4:	0e 94 86 01 	call	0x30c	; 0x30c <see_rxBuffer>
		BLUE_light();
 7a8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <BLUE_light>
		
		lcd_clrscr();
 7ac:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
		lcd_gotoxy(0,0);
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
 7b8:	86 c0       	rjmp	.+268    	; 0x8c6 <__stack+0x67>
		

		} else if (strstr(rxBuffer, "DA")) {
 7ba:	6f e1       	ldi	r22, 0x1F	; 31
 7bc:	71 e0       	ldi	r23, 0x01	; 1
 7be:	84 ec       	ldi	r24, 0xC4	; 196
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strstr>
 7c6:	89 2b       	or	r24, r25
 7c8:	e9 f0       	breq	.+58     	; 0x804 <LUX+0x208>
		if ((after_lux) && (!strcmp(from_number, from_number_lux))) {
 7ca:	80 91 a2 01 	lds	r24, 0x01A2
 7ce:	88 23       	and	r24, r24
 7d0:	09 f4       	brne	.+2      	; 0x7d4 <LUX+0x1d8>
 7d2:	79 c0       	rjmp	.+242    	; 0x8c6 <__stack+0x67>
 7d4:	63 e4       	ldi	r22, 0x43	; 67
 7d6:	73 e0       	ldi	r23, 0x03	; 3
 7d8:	87 eb       	ldi	r24, 0xB7	; 183
 7da:	91 e0       	ldi	r25, 0x01	; 1
 7dc:	0e 94 d0 06 	call	0xda0	; 0xda0 <strcmp>
 7e0:	89 2b       	or	r24, r25
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <LUX+0x1ea>
 7e4:	70 c0       	rjmp	.+224    	; 0x8c6 <__stack+0x67>
			
			if (!upaljeno)
 7e6:	80 91 a4 01 	lds	r24, 0x01A4
 7ea:	81 11       	cpse	r24, r1
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <LUX+0x1fc>
			{
				PORTA |= _BV(LED);
 7ee:	da 9a       	sbi	0x1b, 2	; 27
				upaljeno = 1;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	80 93 a4 01 	sts	0x01A4, r24
 7f6:	03 c0       	rjmp	.+6      	; 0x7fe <LUX+0x202>
			}
			
			else
			{
				PORTA &=~_BV(LED);
 7f8:	da 98       	cbi	0x1b, 2	; 27
				upaljeno = 0;
 7fa:	10 92 a4 01 	sts	0x01A4, r1
			}
			
			after_lux = 0;
 7fe:	10 92 a2 01 	sts	0x01A2, r1
 802:	61 c0       	rjmp	.+194    	; 0x8c6 <__stack+0x67>
		}
		
		}else if(strstr(rxBuffer, "DUGA")){
 804:	62 e2       	ldi	r22, 0x22	; 34
 806:	71 e0       	ldi	r23, 0x01	; 1
 808:	84 ec       	ldi	r24, 0xC4	; 196
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strstr>
 810:	89 2b       	or	r24, r25
 812:	19 f0       	breq	.+6      	; 0x81a <LUX+0x21e>

		rainbow();
 814:	0e 94 82 02 	call	0x504	; 0x504 <rainbow>
 818:	56 c0       	rjmp	.+172    	; 0x8c6 <__stack+0x67>
		
		
		}else{
		//wrong key word.
		
		refresh_rxBuffer();
 81a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <refresh_rxBuffer>
		
		USART_puts(sms);
 81e:	ce 01       	movw	r24, r28
 820:	01 96       	adiw	r24, 0x01	; 1
 822:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
		USART_putc(34);
 826:	82 e2       	ldi	r24, 0x22	; 34
 828:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
		USART_puts(from_number);
 82c:	87 eb       	ldi	r24, 0xB7	; 183
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
		USART_putc(34);
 834:	82 e2       	ldi	r24, 0x22	; 34
 836:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	99 e6       	ldi	r25, 0x69	; 105
 83e:	28 e1       	ldi	r18, 0x18	; 24
 840:	81 50       	subi	r24, 0x01	; 1
 842:	90 40       	sbci	r25, 0x00	; 0
 844:	20 40       	sbci	r18, 0x00	; 0
 846:	e1 f7       	brne	.-8      	; 0x840 <LUX+0x244>
 848:	00 c0       	rjmp	.+0      	; 0x84a <LUX+0x24e>
 84a:	00 00       	nop
		_delay_ms(1000);
		USART_putc(13);
 84c:	8d e0       	ldi	r24, 0x0D	; 13
 84e:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	99 e6       	ldi	r25, 0x69	; 105
 856:	28 e1       	ldi	r18, 0x18	; 24
 858:	81 50       	subi	r24, 0x01	; 1
 85a:	90 40       	sbci	r25, 0x00	; 0
 85c:	20 40       	sbci	r18, 0x00	; 0
 85e:	e1 f7       	brne	.-8      	; 0x858 <LUX+0x25c>
 860:	00 c0       	rjmp	.+0      	; 0x862 <__stack+0x3>
 862:	00 00       	nop
		_delay_ms(1000);

		USART_puts("Kriva kodna rijec.");
 864:	87 e2       	ldi	r24, 0x27	; 39
 866:	91 e0       	ldi	r25, 0x01	; 1
 868:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
		USART_putc(26);// CTRL+z
 86c:	8a e1       	ldi	r24, 0x1A	; 26
 86e:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	9d e3       	ldi	r25, 0x3D	; 61
 876:	29 e4       	ldi	r18, 0x49	; 73
 878:	81 50       	subi	r24, 0x01	; 1
 87a:	90 40       	sbci	r25, 0x00	; 0
 87c:	20 40       	sbci	r18, 0x00	; 0
 87e:	e1 f7       	brne	.-8      	; 0x878 <__stack+0x19>
 880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
 882:	00 00       	nop
		
		_delay_ms(3000);
		
		GREEN_light();
 884:	0e 94 7e 02 	call	0x4fc	; 0x4fc <GREEN_light>
		
		lcd_clrscr();
 888:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
		lcd_gotoxy(0,0);
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		lcd_puts_P("Poslan odgovor");
 894:	86 e7       	ldi	r24, 0x76	; 118
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
		lcd_gotoxy(0,1);
 89c:	61 e0       	ldi	r22, 0x01	; 1
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		lcd_puts_P("na krivu poruku.");
 8a4:	85 e6       	ldi	r24, 0x65	; 101
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
 8ac:	8f ef       	ldi	r24, 0xFF	; 255
 8ae:	93 ed       	ldi	r25, 0xD3	; 211
 8b0:	20 e3       	ldi	r18, 0x30	; 48
 8b2:	81 50       	subi	r24, 0x01	; 1
 8b4:	90 40       	sbci	r25, 0x00	; 0
 8b6:	20 40       	sbci	r18, 0x00	; 0
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <__stack+0x5d>
 8bc:	00 00       	nop
		_delay_ms(2000);
		
		
		see_rxBuffer();
 8be:	0e 94 86 01 	call	0x30c	; 0x30c <see_rxBuffer>
		BLUE_light();
 8c2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <BLUE_light>
		
	}

}
 8c6:	63 96       	adiw	r28, 0x13	; 19
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	f8 94       	cli
 8cc:	de bf       	out	0x3e, r29	; 62
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	cd bf       	out	0x3d, r28	; 61
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	ff 90       	pop	r15
 8dc:	08 95       	ret

000008de <read_new_sms>:


volatile uint8_t k = 0;
volatile char number[13];

void read_new_sms(){
 8de:	cf 93       	push	r28
 8e0:	df 93       	push	r29
 8e2:	1f 92       	push	r1
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
	
	//sms format +CMT: "+385976737211","+385980501","16/07/13,22:01:28+08",4 <enter>
	//<sms text>
	volatile uint8_t is_num=0;
 8e8:	19 82       	std	Y+1, r1	; 0x01
	*number='\0';
 8ea:	10 92 aa 01 	sts	0x01AA, r1
	*from_number='\0';
 8ee:	10 92 b7 01 	sts	0x01B7, r1
	k=0;
 8f2:	10 92 a3 01 	sts	0x01A3, r1
	if(strstr(rxBuffer,"+CMT:")){
 8f6:	63 e4       	ldi	r22, 0x43	; 67
 8f8:	71 e0       	ldi	r23, 0x01	; 1
 8fa:	84 ec       	ldi	r24, 0xC4	; 196
 8fc:	91 e0       	ldi	r25, 0x01	; 1
 8fe:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strstr>
 902:	89 2b       	or	r24, r25
 904:	09 f4       	brne	.+2      	; 0x908 <read_new_sms+0x2a>
 906:	8b c0       	rjmp	.+278    	; 0xa1e <read_new_sms+0x140>
		lcd_clrscr();
 908:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
		lcd_puts_P("+CMT");
 90c:	80 ed       	ldi	r24, 0xD0	; 208
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
		lcd_gotoxy(0,1);
 914:	61 e0       	ldi	r22, 0x01	; 1
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
		lcd_puts_P("broj:");
 91c:	8a ec       	ldi	r24, 0xCA	; 202
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
		
		while(rxReadPos!=rxWritePos){
 924:	90 91 a6 01 	lds	r25, 0x01A6
 928:	80 91 a5 01 	lds	r24, 0x01A5
 92c:	98 17       	cp	r25, r24
 92e:	09 f4       	brne	.+2      	; 0x932 <read_new_sms+0x54>
 930:	3f c0       	rjmp	.+126    	; 0x9b0 <read_new_sms+0xd2>
			
			if(rxBuffer[rxReadPos-1]== '"' && is_num==0){
				//lcd_putc(34);
				is_num=1;
 932:	21 e0       	ldi	r18, 0x01	; 1
				k++;
			}
			
			if(rxBuffer[rxReadPos+1]== '"' && is_num==1){
				//lcd_putc(34);
				is_num=2;
 934:	32 e0       	ldi	r19, 0x02	; 2
		lcd_gotoxy(0,1);
		lcd_puts_P("broj:");
		
		while(rxReadPos!=rxWritePos){
			
			if(rxBuffer[rxReadPos-1]== '"' && is_num==0){
 936:	e0 91 a6 01 	lds	r30, 0x01A6
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	ed 53       	subi	r30, 0x3D	; 61
 93e:	fe 4f       	sbci	r31, 0xFE	; 254
 940:	80 81       	ld	r24, Z
 942:	82 32       	cpi	r24, 0x22	; 34
 944:	21 f4       	brne	.+8      	; 0x94e <read_new_sms+0x70>
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	81 11       	cpse	r24, r1
 94a:	01 c0       	rjmp	.+2      	; 0x94e <read_new_sms+0x70>
				//lcd_putc(34);
				is_num=1;
 94c:	29 83       	std	Y+1, r18	; 0x01
				
			}

			if(is_num==1){
 94e:	89 81       	ldd	r24, Y+1	; 0x01
 950:	81 30       	cpi	r24, 0x01	; 1
 952:	b9 f4       	brne	.+46     	; 0x982 <read_new_sms+0xa4>
				//lcd_putc(rxBuffer[rxReadPos]);
				number[k]=rxBuffer[rxReadPos];
 954:	e0 91 a3 01 	lds	r30, 0x01A3
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	a0 91 a6 01 	lds	r26, 0x01A6
 95e:	b0 e0       	ldi	r27, 0x00	; 0
 960:	ac 53       	subi	r26, 0x3C	; 60
 962:	be 4f       	sbci	r27, 0xFE	; 254
 964:	8c 91       	ld	r24, X
 966:	e6 55       	subi	r30, 0x56	; 86
 968:	fe 4f       	sbci	r31, 0xFE	; 254
 96a:	80 83       	st	Z, r24
				number[k+1]='\0';
 96c:	e0 91 a3 01 	lds	r30, 0x01A3
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	e5 55       	subi	r30, 0x55	; 85
 974:	fe 4f       	sbci	r31, 0xFE	; 254
 976:	10 82       	st	Z, r1
				k++;
 978:	80 91 a3 01 	lds	r24, 0x01A3
 97c:	8f 5f       	subi	r24, 0xFF	; 255
 97e:	80 93 a3 01 	sts	0x01A3, r24
			}
			
			if(rxBuffer[rxReadPos+1]== '"' && is_num==1){
 982:	e0 91 a6 01 	lds	r30, 0x01A6
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	ec 53       	subi	r30, 0x3C	; 60
 98a:	fe 4f       	sbci	r31, 0xFE	; 254
 98c:	81 81       	ldd	r24, Z+1	; 0x01
 98e:	82 32       	cpi	r24, 0x22	; 34
 990:	21 f4       	brne	.+8      	; 0x99a <read_new_sms+0xbc>
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	09 f4       	brne	.+2      	; 0x99a <read_new_sms+0xbc>
				//lcd_putc(34);
				is_num=2;
 998:	39 83       	std	Y+1, r19	; 0x01
			}
			
			rxReadPos++;
 99a:	80 91 a6 01 	lds	r24, 0x01A6
 99e:	8f 5f       	subi	r24, 0xFF	; 255
 9a0:	80 93 a6 01 	sts	0x01A6, r24
		lcd_clrscr();
		lcd_puts_P("+CMT");
		lcd_gotoxy(0,1);
		lcd_puts_P("broj:");
		
		while(rxReadPos!=rxWritePos){
 9a4:	90 91 a6 01 	lds	r25, 0x01A6
 9a8:	80 91 a5 01 	lds	r24, 0x01A5
 9ac:	98 13       	cpse	r25, r24
 9ae:	c3 cf       	rjmp	.-122    	; 0x936 <read_new_sms+0x58>
			}
			
			rxReadPos++;
		}
	//lcd_clrscr();
	lcd_gotoxy(0,1);
 9b0:	61 e0       	ldi	r22, 0x01	; 1
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	0e 94 53 06 	call	0xca6	; 0xca6 <lcd_gotoxy>
	lcd_puts(number);
 9b8:	8a ea       	ldi	r24, 0xAA	; 170
 9ba:	91 e0       	ldi	r25, 0x01	; 1
 9bc:	0e 94 76 06 	call	0xcec	; 0xcec <lcd_puts>
 9c0:	2f ef       	ldi	r18, 0xFF	; 255
 9c2:	8d e3       	ldi	r24, 0x3D	; 61
 9c4:	99 e4       	ldi	r25, 0x49	; 73
 9c6:	21 50       	subi	r18, 0x01	; 1
 9c8:	80 40       	sbci	r24, 0x00	; 0
 9ca:	90 40       	sbci	r25, 0x00	; 0
 9cc:	e1 f7       	brne	.-8      	; 0x9c6 <read_new_sms+0xe8>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <read_new_sms+0xf2>
 9d0:	00 00       	nop
	_delay_ms(3000);	
	
	for(k=0;k!=14;k++){
 9d2:	10 92 a3 01 	sts	0x01A3, r1
 9d6:	80 91 a3 01 	lds	r24, 0x01A3
 9da:	8e 30       	cpi	r24, 0x0E	; 14
 9dc:	a9 f0       	breq	.+42     	; 0xa08 <read_new_sms+0x12a>
		from_number[k]=number[k];
 9de:	e0 91 a3 01 	lds	r30, 0x01A3
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	a0 91 a3 01 	lds	r26, 0x01A3
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	a6 55       	subi	r26, 0x56	; 86
 9ec:	be 4f       	sbci	r27, 0xFE	; 254
 9ee:	8c 91       	ld	r24, X
 9f0:	e9 54       	subi	r30, 0x49	; 73
 9f2:	fe 4f       	sbci	r31, 0xFE	; 254
 9f4:	80 83       	st	Z, r24
	//lcd_clrscr();
	lcd_gotoxy(0,1);
	lcd_puts(number);
	_delay_ms(3000);	
	
	for(k=0;k!=14;k++){
 9f6:	80 91 a3 01 	lds	r24, 0x01A3
 9fa:	8f 5f       	subi	r24, 0xFF	; 255
 9fc:	80 93 a3 01 	sts	0x01A3, r24
 a00:	80 91 a3 01 	lds	r24, 0x01A3
 a04:	8e 30       	cpi	r24, 0x0E	; 14
 a06:	59 f7       	brne	.-42     	; 0x9de <read_new_sms+0x100>
		from_number[k]=number[k];
	}
	
	LUX();
 a08:	0e 94 fe 02 	call	0x5fc	; 0x5fc <LUX>
 a0c:	2f ef       	ldi	r18, 0xFF	; 255
 a0e:	81 e1       	ldi	r24, 0x11	; 17
 a10:	9a e7       	ldi	r25, 0x7A	; 122
 a12:	21 50       	subi	r18, 0x01	; 1
 a14:	80 40       	sbci	r24, 0x00	; 0
 a16:	90 40       	sbci	r25, 0x00	; 0
 a18:	e1 f7       	brne	.-8      	; 0xa12 <read_new_sms+0x134>
 a1a:	00 c0       	rjmp	.+0      	; 0xa1c <read_new_sms+0x13e>
 a1c:	00 00       	nop
	_delay_ms(5000);
	}
}
 a1e:	0f 90       	pop	r0
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	08 95       	ret

00000a26 <sleep_mode>:
	lcd_clrscr();
	see_rxBuffer();
	_delay_ms(1000);
	
}
void sleep_mode(){
 a26:	cf 93       	push	r28
 a28:	df 93       	push	r29
 a2a:	cd b7       	in	r28, 0x3d	; 61
 a2c:	de b7       	in	r29, 0x3e	; 62
 a2e:	2a 97       	sbiw	r28, 0x0a	; 10
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	f8 94       	cli
 a34:	de bf       	out	0x3e, r29	; 62
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	cd bf       	out	0x3d, r28	; 61
	
	char sleep[]="AT+S32K=1";
 a3a:	8a e0       	ldi	r24, 0x0A	; 10
 a3c:	ec e7       	ldi	r30, 0x7C	; 124
 a3e:	f1 e0       	ldi	r31, 0x01	; 1
 a40:	de 01       	movw	r26, r28
 a42:	11 96       	adiw	r26, 0x01	; 1
 a44:	01 90       	ld	r0, Z+
 a46:	0d 92       	st	X+, r0
 a48:	8a 95       	dec	r24
 a4a:	e1 f7       	brne	.-8      	; 0xa44 <sleep_mode+0x1e>
	
	refresh_rxBuffer();
 a4c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <refresh_rxBuffer>
	lcd_clrscr();
 a50:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
	lcd_puts_P("allow sleep mode");
 a54:	84 e5       	ldi	r24, 0x54	; 84
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
	USART_puts(sleep);
 a5c:	ce 01       	movw	r24, r28
 a5e:	01 96       	adiw	r24, 0x01	; 1
 a60:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
	USART_putc(13); //ENTER
 a64:	8d e0       	ldi	r24, 0x0D	; 13
 a66:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 a6a:	2f ef       	ldi	r18, 0xFF	; 255
 a6c:	81 e1       	ldi	r24, 0x11	; 17
 a6e:	9a e7       	ldi	r25, 0x7A	; 122
 a70:	21 50       	subi	r18, 0x01	; 1
 a72:	80 40       	sbci	r24, 0x00	; 0
 a74:	90 40       	sbci	r25, 0x00	; 0
 a76:	e1 f7       	brne	.-8      	; 0xa70 <sleep_mode+0x4a>
 a78:	00 c0       	rjmp	.+0      	; 0xa7a <sleep_mode+0x54>
 a7a:	00 00       	nop
	_delay_ms(5000);
	lcd_clrscr();
 a7c:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
	see_rxBuffer();
 a80:	0e 94 86 01 	call	0x30c	; 0x30c <see_rxBuffer>
 a84:	2f ef       	ldi	r18, 0xFF	; 255
 a86:	89 e6       	ldi	r24, 0x69	; 105
 a88:	98 e1       	ldi	r25, 0x18	; 24
 a8a:	21 50       	subi	r18, 0x01	; 1
 a8c:	80 40       	sbci	r24, 0x00	; 0
 a8e:	90 40       	sbci	r25, 0x00	; 0
 a90:	e1 f7       	brne	.-8      	; 0xa8a <sleep_mode+0x64>
 a92:	00 c0       	rjmp	.+0      	; 0xa94 <sleep_mode+0x6e>
 a94:	00 00       	nop
	_delay_ms(1000);
	
}
 a96:	2a 96       	adiw	r28, 0x0a	; 10
 a98:	0f b6       	in	r0, 0x3f	; 63
 a9a:	f8 94       	cli
 a9c:	de bf       	out	0x3e, r29	; 62
 a9e:	0f be       	out	0x3f, r0	; 63
 aa0:	cd bf       	out	0x3d, r28	; 61
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	08 95       	ret

00000aa8 <main>:
 * @brief Main
 *
 * Function is called once the program is started.
 */
int main(void)
{
 aa8:	cf 93       	push	r28
 aaa:	df 93       	push	r29
 aac:	cd b7       	in	r28, 0x3d	; 61
 aae:	de b7       	in	r29, 0x3e	; 62
 ab0:	6c 97       	sbiw	r28, 0x1c	; 28
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	f8 94       	cli
 ab6:	de bf       	out	0x3e, r29	; 62
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	cd bf       	out	0x3d, r28	; 61
	

	init();
 abc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <init>
	sei();
 ac0:	78 94       	sei
	

	while(!enable_text_mode());
 ac2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <enable_text_mode>
 ac6:	89 2b       	or	r24, r25
 ac8:	e1 f3       	breq	.-8      	; 0xac2 <main+0x1a>
	
	//delete all recived read messages
	char del[] = "AT+CMGD=1,4";
 aca:	8c e0       	ldi	r24, 0x0C	; 12
 acc:	e6 e8       	ldi	r30, 0x86	; 134
 ace:	f1 e0       	ldi	r31, 0x01	; 1
 ad0:	de 01       	movw	r26, r28
 ad2:	11 96       	adiw	r26, 0x01	; 1
 ad4:	01 90       	ld	r0, Z+
 ad6:	0d 92       	st	X+, r0
 ad8:	8a 95       	dec	r24
 ada:	e1 f7       	brne	.-8      	; 0xad4 <main+0x2c>
	lcd_puts_P("Delete all sms");
 adc:	8e ee       	ldi	r24, 0xEE	; 238
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
	USART_puts(del);
 ae4:	ce 01       	movw	r24, r28
 ae6:	01 96       	adiw	r24, 0x01	; 1
 ae8:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
	USART_putc(13); //ENTER
 aec:	8d e0       	ldi	r24, 0x0D	; 13
 aee:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 af2:	2f ef       	ldi	r18, 0xFF	; 255
 af4:	87 ea       	ldi	r24, 0xA7	; 167
 af6:	91 e6       	ldi	r25, 0x61	; 97
 af8:	21 50       	subi	r18, 0x01	; 1
 afa:	80 40       	sbci	r24, 0x00	; 0
 afc:	90 40       	sbci	r25, 0x00	; 0
 afe:	e1 f7       	brne	.-8      	; 0xaf8 <main+0x50>
 b00:	00 c0       	rjmp	.+0      	; 0xb02 <main+0x5a>
 b02:	00 00       	nop
	_delay_ms(4000);
	
	//list all recived unread :char list[] = "AT+CMGL=1";
	
	char send_sms_to_serial_upon_receipt[]= "AT+CNMI=3,3,0,0";
 b04:	80 e1       	ldi	r24, 0x10	; 16
 b06:	e2 e9       	ldi	r30, 0x92	; 146
 b08:	f1 e0       	ldi	r31, 0x01	; 1
 b0a:	de 01       	movw	r26, r28
 b0c:	1d 96       	adiw	r26, 0x0d	; 13
 b0e:	01 90       	ld	r0, Z+
 b10:	0d 92       	st	X+, r0
 b12:	8a 95       	dec	r24
 b14:	e1 f7       	brne	.-8      	; 0xb0e <main+0x66>
	
	lcd_clrscr();
 b16:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
	lcd_puts_P("Send sms to uart");
 b1a:	8d ed       	ldi	r24, 0xDD	; 221
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
	USART_puts(send_sms_to_serial_upon_receipt);
 b22:	ce 01       	movw	r24, r28
 b24:	0d 96       	adiw	r24, 0x0d	; 13
 b26:	0e 94 36 01 	call	0x26c	; 0x26c <USART_puts>
	USART_putc(13); //ENTER
 b2a:	8d e0       	ldi	r24, 0x0D	; 13
 b2c:	0e 94 32 01 	call	0x264	; 0x264 <USART_putc>
 b30:	2f ef       	ldi	r18, 0xFF	; 255
 b32:	83 ed       	ldi	r24, 0xD3	; 211
 b34:	90 e3       	ldi	r25, 0x30	; 48
 b36:	21 50       	subi	r18, 0x01	; 1
 b38:	80 40       	sbci	r24, 0x00	; 0
 b3a:	90 40       	sbci	r25, 0x00	; 0
 b3c:	e1 f7       	brne	.-8      	; 0xb36 <main+0x8e>
 b3e:	00 c0       	rjmp	.+0      	; 0xb40 <main+0x98>
 b40:	00 00       	nop
	_delay_ms(2000);
	
	
	
	sleep_mode();
 b42:	0e 94 13 05 	call	0xa26	; 0xa26 <sleep_mode>
 b46:	2f ef       	ldi	r18, 0xFF	; 255
 b48:	8d e3       	ldi	r24, 0x3D	; 61
 b4a:	99 e4       	ldi	r25, 0x49	; 73
 b4c:	21 50       	subi	r18, 0x01	; 1
 b4e:	80 40       	sbci	r24, 0x00	; 0
 b50:	90 40       	sbci	r25, 0x00	; 0
 b52:	e1 f7       	brne	.-8      	; 0xb4c <main+0xa4>
 b54:	00 c0       	rjmp	.+0      	; 0xb56 <main+0xae>
 b56:	00 00       	nop
	_delay_ms(3000);
	lcd_clrscr();
 b58:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
	first_data = 0;
 b5c:	10 92 60 00 	sts	0x0060, r1
	refresh_rxBuffer();
 b60:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <refresh_rxBuffer>
	//ovdje si:
	PORTA|=_BV(SLEEP);
 b64:	db 9a       	sbi	0x1b, 3	; 27
			_delay_ms(5000);
			lcd_clrscr();
			lcd_puts_P("got sms");
			_delay_ms(3000);
			read_new_sms();
			first_data=-1;
 b66:	1f ef       	ldi	r17, 0xFF	; 255
	//PORTA|=_BV(SLEEP);	//HIGH voltage- enable sleep mode	
	//PORTA&=~_BV(SLEEP); //LOW voltage- disable sleep mode
	
	while(1){
	
		if(first_data == 1 ){
 b68:	80 91 60 00 	lds	r24, 0x0060
 b6c:	81 30       	cpi	r24, 0x01	; 1
 b6e:	e1 f7       	brne	.-8      	; 0xb68 <main+0xc0>
 b70:	2f ef       	ldi	r18, 0xFF	; 255
 b72:	81 e1       	ldi	r24, 0x11	; 17
 b74:	9a e7       	ldi	r25, 0x7A	; 122
 b76:	21 50       	subi	r18, 0x01	; 1
 b78:	80 40       	sbci	r24, 0x00	; 0
 b7a:	90 40       	sbci	r25, 0x00	; 0
 b7c:	e1 f7       	brne	.-8      	; 0xb76 <main+0xce>
 b7e:	00 c0       	rjmp	.+0      	; 0xb80 <main+0xd8>
 b80:	00 00       	nop
			_delay_ms(5000);
			lcd_clrscr();
 b82:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
			lcd_puts_P("got sms");
 b86:	85 ed       	ldi	r24, 0xD5	; 213
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_puts_p>
 b8e:	2f ef       	ldi	r18, 0xFF	; 255
 b90:	8d e3       	ldi	r24, 0x3D	; 61
 b92:	99 e4       	ldi	r25, 0x49	; 73
 b94:	21 50       	subi	r18, 0x01	; 1
 b96:	80 40       	sbci	r24, 0x00	; 0
 b98:	90 40       	sbci	r25, 0x00	; 0
 b9a:	e1 f7       	brne	.-8      	; 0xb94 <main+0xec>
 b9c:	00 c0       	rjmp	.+0      	; 0xb9e <main+0xf6>
 b9e:	00 00       	nop
			_delay_ms(3000);
			read_new_sms();
 ba0:	0e 94 6f 04 	call	0x8de	; 0x8de <read_new_sms>
			first_data=-1;
 ba4:	10 93 60 00 	sts	0x0060, r17
			sleep_mode();
 ba8:	0e 94 13 05 	call	0xa26	; 0xa26 <sleep_mode>
 bac:	2f ef       	ldi	r18, 0xFF	; 255
 bae:	8d e3       	ldi	r24, 0x3D	; 61
 bb0:	99 e4       	ldi	r25, 0x49	; 73
 bb2:	21 50       	subi	r18, 0x01	; 1
 bb4:	80 40       	sbci	r24, 0x00	; 0
 bb6:	90 40       	sbci	r25, 0x00	; 0
 bb8:	e1 f7       	brne	.-8      	; 0xbb2 <main+0x10a>
 bba:	00 c0       	rjmp	.+0      	; 0xbbc <main+0x114>
 bbc:	00 00       	nop
			_delay_ms(3000);
			lcd_clrscr();
 bbe:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
			first_data = 0;
 bc2:	10 92 60 00 	sts	0x0060, r1
 bc6:	d0 cf       	rjmp	.-96     	; 0xb68 <main+0xc0>

00000bc8 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 bc8:	97 9a       	sbi	0x12, 7	; 18
    lcd_e_delay();
 bca:	00 c0       	rjmp	.+0      	; 0xbcc <toggle_e+0x4>
    lcd_e_low();
 bcc:	97 98       	cbi	0x12, 7	; 18
 bce:	08 95       	ret

00000bd0 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 bd0:	cf 93       	push	r28
 bd2:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 bd4:	66 23       	and	r22, r22
 bd6:	11 f0       	breq	.+4      	; 0xbdc <lcd_write+0xc>
       lcd_rs_high();
 bd8:	95 9a       	sbi	0x12, 5	; 18
 bda:	01 c0       	rjmp	.+2      	; 0xbde <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 bdc:	95 98       	cbi	0x12, 5	; 18
    }
    lcd_rw_low();
 bde:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 be0:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 be2:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 be4:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 be6:	d7 9a       	sbi	0x1a, 7	; 26
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 be8:	df 98       	cbi	0x1b, 7	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 bea:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 bec:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 bee:	dc 98       	cbi	0x1b, 4	; 27
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 bf0:	cc 23       	and	r28, r28
 bf2:	0c f4       	brge	.+2      	; 0xbf6 <lcd_write+0x26>
 bf4:	df 9a       	sbi	0x1b, 7	; 27
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 bf6:	c6 fd       	sbrc	r28, 6
 bf8:	de 9a       	sbi	0x1b, 6	; 27
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 bfa:	c5 fd       	sbrc	r28, 5
 bfc:	dd 9a       	sbi	0x1b, 5	; 27
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 bfe:	c4 fd       	sbrc	r28, 4
 c00:	dc 9a       	sbi	0x1b, 4	; 27
        lcd_e_toggle();
 c02:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 c06:	df 98       	cbi	0x1b, 7	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 c08:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 c0a:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 c0c:	dc 98       	cbi	0x1b, 4	; 27
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 c0e:	c3 fd       	sbrc	r28, 3
 c10:	df 9a       	sbi	0x1b, 7	; 27
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 c12:	c2 fd       	sbrc	r28, 2
 c14:	de 9a       	sbi	0x1b, 6	; 27
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 c16:	c1 fd       	sbrc	r28, 1
 c18:	dd 9a       	sbi	0x1b, 5	; 27
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 c1a:	c0 fd       	sbrc	r28, 0
 c1c:	dc 9a       	sbi	0x1b, 4	; 27
        lcd_e_toggle();        
 c1e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 c22:	dc 9a       	sbi	0x1b, 4	; 27
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 c24:	dd 9a       	sbi	0x1b, 5	; 27
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 c26:	de 9a       	sbi	0x1b, 6	; 27
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 c28:	df 9a       	sbi	0x1b, 7	; 27
    }
}
 c2a:	cf 91       	pop	r28
 c2c:	08 95       	ret

00000c2e <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 c2e:	88 23       	and	r24, r24
 c30:	11 f0       	breq	.+4      	; 0xc36 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 c32:	95 9a       	sbi	0x12, 5	; 18
 c34:	01 c0       	rjmp	.+2      	; 0xc38 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 c36:	95 98       	cbi	0x12, 5	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
 c38:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 c3a:	d4 98       	cbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 c3c:	d5 98       	cbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 c3e:	d6 98       	cbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 c40:	d7 98       	cbi	0x1a, 7	; 26
                
        /* read high nibble first */
        lcd_e_high();
 c42:	97 9a       	sbi	0x12, 7	; 18
        lcd_e_delay();        
 c44:	00 c0       	rjmp	.+0      	; 0xc46 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 c46:	cc 99       	sbic	0x19, 4	; 25
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 c4a:	80 e0       	ldi	r24, 0x00	; 0
 c4c:	01 c0       	rjmp	.+2      	; 0xc50 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 c4e:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 c50:	cd 99       	sbic	0x19, 5	; 25
 c52:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 c54:	ce 99       	sbic	0x19, 6	; 25
 c56:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 c58:	cf 99       	sbic	0x19, 7	; 25
 c5a:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 c5c:	97 98       	cbi	0x12, 7	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
 c5e:	00 c0       	rjmp	.+0      	; 0xc60 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 c60:	97 9a       	sbi	0x12, 7	; 18
        lcd_e_delay();
 c62:	00 c0       	rjmp	.+0      	; 0xc64 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 c64:	cc 99       	sbic	0x19, 4	; 25
 c66:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 c68:	cd 99       	sbic	0x19, 5	; 25
 c6a:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 c6c:	ce 99       	sbic	0x19, 6	; 25
 c6e:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 c70:	cf 99       	sbic	0x19, 7	; 25
 c72:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 c74:	97 98       	cbi	0x12, 7	; 18
    }
    return data;
}
 c76:	08 95       	ret

00000c78 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 c78:	80 e0       	ldi	r24, 0x00	; 0
 c7a:	0e 94 17 06 	call	0xc2e	; 0xc2e <lcd_read>
 c7e:	88 23       	and	r24, r24
 c80:	dc f3       	brlt	.-10     	; 0xc78 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 c82:	83 e0       	ldi	r24, 0x03	; 3
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	01 97       	sbiw	r24, 0x01	; 1
 c88:	f1 f7       	brne	.-4      	; 0xc86 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 c8a:	80 e0       	ldi	r24, 0x00	; 0
 c8c:	0e 94 17 06 	call	0xc2e	; 0xc2e <lcd_read>
    
}/* lcd_waitbusy */
 c90:	08 95       	ret

00000c92 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 c92:	cf 93       	push	r28
 c94:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 c96:	0e 94 3c 06 	call	0xc78	; 0xc78 <lcd_waitbusy>
    lcd_write(cmd,0);
 c9a:	60 e0       	ldi	r22, 0x00	; 0
 c9c:	8c 2f       	mov	r24, r28
 c9e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <lcd_write>
}
 ca2:	cf 91       	pop	r28
 ca4:	08 95       	ret

00000ca6 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 ca6:	61 11       	cpse	r22, r1
 ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 caa:	80 58       	subi	r24, 0x80	; 128
 cac:	0e 94 49 06 	call	0xc92	; 0xc92 <lcd_command>
 cb0:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 cb2:	80 54       	subi	r24, 0x40	; 64
 cb4:	0e 94 49 06 	call	0xc92	; 0xc92 <lcd_command>
 cb8:	08 95       	ret

00000cba <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 cba:	81 e0       	ldi	r24, 0x01	; 1
 cbc:	0e 94 49 06 	call	0xc92	; 0xc92 <lcd_command>
 cc0:	08 95       	ret

00000cc2 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 cc2:	cf 93       	push	r28
 cc4:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 cc6:	0e 94 3c 06 	call	0xc78	; 0xc78 <lcd_waitbusy>
    if (c=='\n')
 cca:	ca 30       	cpi	r28, 0x0A	; 10
 ccc:	49 f4       	brne	.+18     	; 0xce0 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 cce:	80 34       	cpi	r24, 0x40	; 64
 cd0:	10 f4       	brcc	.+4      	; 0xcd6 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 cd2:	80 e4       	ldi	r24, 0x40	; 64
 cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 cd6:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 cd8:	80 58       	subi	r24, 0x80	; 128
 cda:	0e 94 49 06 	call	0xc92	; 0xc92 <lcd_command>
 cde:	04 c0       	rjmp	.+8      	; 0xce8 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 ce0:	61 e0       	ldi	r22, 0x01	; 1
 ce2:	8c 2f       	mov	r24, r28
 ce4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <lcd_write>
    }

}/* lcd_putc */
 ce8:	cf 91       	pop	r28
 cea:	08 95       	ret

00000cec <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 cec:	cf 93       	push	r28
 cee:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 cf0:	ec 01       	movw	r28, r24
 cf2:	21 96       	adiw	r28, 0x01	; 1
 cf4:	fc 01       	movw	r30, r24
 cf6:	80 81       	ld	r24, Z
 cf8:	88 23       	and	r24, r24
 cfa:	29 f0       	breq	.+10     	; 0xd06 <lcd_puts+0x1a>
        lcd_putc(c);
 cfc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 d00:	89 91       	ld	r24, Y+
 d02:	81 11       	cpse	r24, r1
 d04:	fb cf       	rjmp	.-10     	; 0xcfc <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 d06:	df 91       	pop	r29
 d08:	cf 91       	pop	r28
 d0a:	08 95       	ret

00000d0c <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 d0c:	cf 93       	push	r28
 d0e:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 d10:	ec 01       	movw	r28, r24
 d12:	21 96       	adiw	r28, 0x01	; 1
 d14:	fc 01       	movw	r30, r24
 d16:	84 91       	lpm	r24, Z
 d18:	88 23       	and	r24, r24
 d1a:	39 f0       	breq	.+14     	; 0xd2a <lcd_puts_p+0x1e>
        lcd_putc(c);
 d1c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 d20:	fe 01       	movw	r30, r28
 d22:	84 91       	lpm	r24, Z
 d24:	21 96       	adiw	r28, 0x01	; 1
 d26:	81 11       	cpse	r24, r1
 d28:	f9 cf       	rjmp	.-14     	; 0xd1c <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 d2a:	df 91       	pop	r29
 d2c:	cf 91       	pop	r28
 d2e:	08 95       	ret

00000d30 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 d30:	cf 93       	push	r28
 d32:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 d34:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 d36:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 d38:	8f 9a       	sbi	0x11, 7	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 d3a:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 d3c:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 d3e:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 d40:	d7 9a       	sbi	0x1a, 7	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 d42:	e0 e3       	ldi	r30, 0x30	; 48
 d44:	f3 e7       	ldi	r31, 0x73	; 115
 d46:	31 97       	sbiw	r30, 0x01	; 1
 d48:	f1 f7       	brne	.-4      	; 0xd46 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 d4a:	dd 9a       	sbi	0x1b, 5	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 d4c:	dc 9a       	sbi	0x1b, 4	; 27
    lcd_e_toggle();
 d4e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 d52:	e0 ef       	ldi	r30, 0xF0	; 240
 d54:	f3 e2       	ldi	r31, 0x23	; 35
 d56:	31 97       	sbiw	r30, 0x01	; 1
 d58:	f1 f7       	brne	.-4      	; 0xd56 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 d5a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 d5e:	e5 e7       	ldi	r30, 0x75	; 117
 d60:	f0 e0       	ldi	r31, 0x00	; 0
 d62:	31 97       	sbiw	r30, 0x01	; 1
 d64:	f1 f7       	brne	.-4      	; 0xd62 <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 d66:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 d6a:	e5 e7       	ldi	r30, 0x75	; 117
 d6c:	f0 e0       	ldi	r31, 0x00	; 0
 d6e:	31 97       	sbiw	r30, 0x01	; 1
 d70:	f1 f7       	brne	.-4      	; 0xd6e <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 d72:	dc 98       	cbi	0x1b, 4	; 27
    lcd_e_toggle();
 d74:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 d78:	e5 e7       	ldi	r30, 0x75	; 117
 d7a:	f0 e0       	ldi	r31, 0x00	; 0
 d7c:	31 97       	sbiw	r30, 0x01	; 1
 d7e:	f1 f7       	brne	.-4      	; 0xd7c <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 d80:	88 e2       	ldi	r24, 0x28	; 40
 d82:	0e 94 49 06 	call	0xc92	; 0xc92 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 d86:	88 e0       	ldi	r24, 0x08	; 8
 d88:	0e 94 49 06 	call	0xc92	; 0xc92 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 d8c:	0e 94 5d 06 	call	0xcba	; 0xcba <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 d90:	86 e0       	ldi	r24, 0x06	; 6
 d92:	0e 94 49 06 	call	0xc92	; 0xc92 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 d96:	8c 2f       	mov	r24, r28
 d98:	0e 94 49 06 	call	0xc92	; 0xc92 <lcd_command>

}/* lcd_init */
 d9c:	cf 91       	pop	r28
 d9e:	08 95       	ret

00000da0 <strcmp>:
 da0:	fb 01       	movw	r30, r22
 da2:	dc 01       	movw	r26, r24
 da4:	8d 91       	ld	r24, X+
 da6:	01 90       	ld	r0, Z+
 da8:	80 19       	sub	r24, r0
 daa:	01 10       	cpse	r0, r1
 dac:	d9 f3       	breq	.-10     	; 0xda4 <strcmp+0x4>
 dae:	99 0b       	sbc	r25, r25
 db0:	08 95       	ret

00000db2 <strstr>:
 db2:	fb 01       	movw	r30, r22
 db4:	51 91       	ld	r21, Z+
 db6:	55 23       	and	r21, r21
 db8:	a9 f0       	breq	.+42     	; 0xde4 <strstr+0x32>
 dba:	bf 01       	movw	r22, r30
 dbc:	dc 01       	movw	r26, r24
 dbe:	4d 91       	ld	r20, X+
 dc0:	45 17       	cp	r20, r21
 dc2:	41 11       	cpse	r20, r1
 dc4:	e1 f7       	brne	.-8      	; 0xdbe <strstr+0xc>
 dc6:	59 f4       	brne	.+22     	; 0xdde <strstr+0x2c>
 dc8:	cd 01       	movw	r24, r26
 dca:	01 90       	ld	r0, Z+
 dcc:	00 20       	and	r0, r0
 dce:	49 f0       	breq	.+18     	; 0xde2 <strstr+0x30>
 dd0:	4d 91       	ld	r20, X+
 dd2:	40 15       	cp	r20, r0
 dd4:	41 11       	cpse	r20, r1
 dd6:	c9 f3       	breq	.-14     	; 0xdca <strstr+0x18>
 dd8:	fb 01       	movw	r30, r22
 dda:	41 11       	cpse	r20, r1
 ddc:	ef cf       	rjmp	.-34     	; 0xdbc <strstr+0xa>
 dde:	81 e0       	ldi	r24, 0x01	; 1
 de0:	90 e0       	ldi	r25, 0x00	; 0
 de2:	01 97       	sbiw	r24, 0x01	; 1
 de4:	08 95       	ret

00000de6 <__itoa_ncheck>:
 de6:	bb 27       	eor	r27, r27
 de8:	4a 30       	cpi	r20, 0x0A	; 10
 dea:	31 f4       	brne	.+12     	; 0xdf8 <__itoa_ncheck+0x12>
 dec:	99 23       	and	r25, r25
 dee:	22 f4       	brpl	.+8      	; 0xdf8 <__itoa_ncheck+0x12>
 df0:	bd e2       	ldi	r27, 0x2D	; 45
 df2:	90 95       	com	r25
 df4:	81 95       	neg	r24
 df6:	9f 4f       	sbci	r25, 0xFF	; 255
 df8:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__utoa_common>

00000dfc <__utoa_ncheck>:
 dfc:	bb 27       	eor	r27, r27

00000dfe <__utoa_common>:
 dfe:	fb 01       	movw	r30, r22
 e00:	55 27       	eor	r21, r21
 e02:	aa 27       	eor	r26, r26
 e04:	88 0f       	add	r24, r24
 e06:	99 1f       	adc	r25, r25
 e08:	aa 1f       	adc	r26, r26
 e0a:	a4 17       	cp	r26, r20
 e0c:	10 f0       	brcs	.+4      	; 0xe12 <__utoa_common+0x14>
 e0e:	a4 1b       	sub	r26, r20
 e10:	83 95       	inc	r24
 e12:	50 51       	subi	r21, 0x10	; 16
 e14:	b9 f7       	brne	.-18     	; 0xe04 <__utoa_common+0x6>
 e16:	a0 5d       	subi	r26, 0xD0	; 208
 e18:	aa 33       	cpi	r26, 0x3A	; 58
 e1a:	08 f0       	brcs	.+2      	; 0xe1e <__utoa_common+0x20>
 e1c:	a9 5d       	subi	r26, 0xD9	; 217
 e1e:	a1 93       	st	Z+, r26
 e20:	00 97       	sbiw	r24, 0x00	; 0
 e22:	79 f7       	brne	.-34     	; 0xe02 <__utoa_common+0x4>
 e24:	b1 11       	cpse	r27, r1
 e26:	b1 93       	st	Z+, r27
 e28:	11 92       	st	Z+, r1
 e2a:	cb 01       	movw	r24, r22
 e2c:	0c 94 18 07 	jmp	0xe30	; 0xe30 <strrev>

00000e30 <strrev>:
 e30:	dc 01       	movw	r26, r24
 e32:	fc 01       	movw	r30, r24
 e34:	67 2f       	mov	r22, r23
 e36:	71 91       	ld	r23, Z+
 e38:	77 23       	and	r23, r23
 e3a:	e1 f7       	brne	.-8      	; 0xe34 <strrev+0x4>
 e3c:	32 97       	sbiw	r30, 0x02	; 2
 e3e:	04 c0       	rjmp	.+8      	; 0xe48 <strrev+0x18>
 e40:	7c 91       	ld	r23, X
 e42:	6d 93       	st	X+, r22
 e44:	70 83       	st	Z, r23
 e46:	62 91       	ld	r22, -Z
 e48:	ae 17       	cp	r26, r30
 e4a:	bf 07       	cpc	r27, r31
 e4c:	c8 f3       	brcs	.-14     	; 0xe40 <strrev+0x10>
 e4e:	08 95       	ret

00000e50 <_exit>:
 e50:	f8 94       	cli

00000e52 <__stop_program>:
 e52:	ff cf       	rjmp	.-2      	; 0xe52 <__stop_program>
